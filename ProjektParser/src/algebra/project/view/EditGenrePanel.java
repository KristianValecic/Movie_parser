/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algebra.project.view;

import algebra.project.dal.Repository;
import algebra.project.dal.RepositoryFactory;
import algebra.project.model.GenreTransferable;
import algebra.project.model.Movie;
import algebra.project.model.Person;
import algebra.project.model.PersonTransferable;
//import algebra.project.model.Person;
import algebra.project.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Kiki
 */
public class EditGenrePanel extends javax.swing.JPanel {

    /**
     * Creates new form EditGenrePanel
     */
    private Repository repository;
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private List<String> genres;
    private List<String> allGenres;
    private Movie selectedMovie;
    
    private DefaultListModel<String> genresModel = new DefaultListModel<>();
    private DefaultListModel<String> allGenresModel = new DefaultListModel<>();
    
    public EditGenrePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        lblMovieTitle = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfGenreName = new javax.swing.JTextField();
        btnCreateGenre = new javax.swing.JButton();
        btnDeleteSelecteGenreOfMovie = new javax.swing.JButton();
        btnDeleteAllGenre = new javax.swing.JButton();
        btnUpdateMovieGenre = new javax.swing.JButton();
        btnResetChanges = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblErrorGenreName = new javax.swing.JLabel();
        btnDeleteSelecteGenre = new javax.swing.JButton();

        setForeground(java.awt.Color.white);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsGenres);

        jLabel1.setText("Genres");

        jScrollPane2.setViewportView(lsAllGenres);

        jLabel2.setText("All gneres");

        lblMovieTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblMovieTitle.setText("Movie title");

        jLabel3.setText("Genre name");

        tfGenreName.setName("Genre name"); // NOI18N

        btnCreateGenre.setText("Create genre");
        btnCreateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateGenreActionPerformed(evt);
            }
        });

        btnDeleteSelecteGenreOfMovie.setBackground(java.awt.Color.red);
        btnDeleteSelecteGenreOfMovie.setForeground(java.awt.Color.white);
        btnDeleteSelecteGenreOfMovie.setText("Delete selected genre of movie");
        btnDeleteSelecteGenreOfMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelecteGenreOfMovieActionPerformed(evt);
            }
        });

        btnDeleteAllGenre.setBackground(java.awt.Color.red);
        btnDeleteAllGenre.setForeground(java.awt.Color.white);
        btnDeleteAllGenre.setText("Delete all genres");
        btnDeleteAllGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllGenreActionPerformed(evt);
            }
        });

        btnUpdateMovieGenre.setBackground(java.awt.Color.blue);
        btnUpdateMovieGenre.setForeground(java.awt.Color.white);
        btnUpdateMovieGenre.setText("Commit changes to movie");
        btnUpdateMovieGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieGenreActionPerformed(evt);
            }
        });

        btnResetChanges.setBackground(java.awt.Color.darkGray);
        btnResetChanges.setText("Reset changes");
        btnResetChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetChangesActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(120, 120, 120));
        jLabel4.setText("Create a genre");

        lblErrorGenreName.setForeground(java.awt.Color.red);

        btnDeleteSelecteGenre.setBackground(java.awt.Color.red);
        btnDeleteSelecteGenre.setForeground(java.awt.Color.white);
        btnDeleteSelecteGenre.setText("Delete selected genre");
        btnDeleteSelecteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelecteGenreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDeleteSelecteGenreOfMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnDeleteAllGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(175, 175, 175)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(btnDeleteSelecteGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfGenreName)
                                    .addComponent(btnCreateGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpdateMovieGenre, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(btnResetChanges, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblErrorGenreName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(lblMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblErrorGenreName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfGenreName, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(btnCreateGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnResetChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateMovieGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteSelecteGenreOfMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteSelecteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteAllGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initSelectedMovie();
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Info", "Please select movie");
            return;
        }
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnDeleteSelecteGenreOfMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelecteGenreOfMovieActionPerformed
        if (lsGenres.getSelectedValue() == null) {
            MessageUtils.showInformationMessage("Error", "Select a genre to delete");
        }
        genres.remove(lsGenres.getSelectedValue());
        loadGenres();
    }//GEN-LAST:event_btnDeleteSelecteGenreOfMovieActionPerformed

    private void btnDeleteAllGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllGenreActionPerformed
        genres.clear();
        loadGenres();
    }//GEN-LAST:event_btnDeleteAllGenreActionPerformed

    private void btnCreateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateGenreActionPerformed
        if (!formValid()) {
            return;
        }
        try {
            if (repository.createGenre(tfGenreName.getText().trim()) == 0) {
                lblErrorGenreName.setText("Genre already exists");
            }
            loadAllGenres();
        } catch (Exception ex) {
            Logger.getLogger(EditPersonPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCreateGenreActionPerformed

    private void btnResetChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetChangesActionPerformed
        try {
            resetGenres();
            loadGenres();
        } catch (Exception ex) {
            Logger.getLogger(EditPersonPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnResetChangesActionPerformed

    private void btnUpdateMovieGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieGenreActionPerformed
        try {
            repository.deleteAllMovieGenres(selectedMovie.getId());
            repository.createAllMovieGenres(selectedMovie.getId(), genres);
        } catch (Exception ex) {
            Logger.getLogger(EditPersonPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateMovieGenreActionPerformed

    private void btnDeleteSelecteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelecteGenreActionPerformed
        if (lsAllGenres.getSelectedValue() == null) {
            MessageUtils.showInformationMessage("Error", "Select a genre to delete");
        }
        try {
            repository.deleteMovieGenre(lsAllGenres.getSelectedValue());
            genres.remove(lsAllGenres.getSelectedValue());
            loadAllGenres();
            loadGenres();
        } catch (Exception ex) {
            Logger.getLogger(EditPersonPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteSelecteGenreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateGenre;
    private javax.swing.JButton btnDeleteAllGenre;
    private javax.swing.JButton btnDeleteSelecteGenre;
    private javax.swing.JButton btnDeleteSelecteGenreOfMovie;
    private javax.swing.JButton btnResetChanges;
    private javax.swing.JButton btnUpdateMovieGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblErrorGenreName;
    private javax.swing.JLabel lblMovieTitle;
    private javax.swing.JList<String> lsAllGenres;
    private javax.swing.JList<String> lsGenres;
    private javax.swing.JTextField tfGenreName;
    // End of variables declaration//GEN-END:variables

    private void initSelectedMovie() {
        selectedMovie = EditMoviePanel.getMovie();
    }

    private void init() {
        try {
            initValidation();
            initRepository();
            initLists();
            loadGenres();
            loadAllGenres();
            initDragNDop();
            lblMovieTitle.setText(selectedMovie.getTitle());
        } catch (Exception ex) {
            Logger.getLogger(EditPersonPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfGenreName);
        errorLabels = Arrays.asList(lblErrorGenreName);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initLists() throws Exception {
        //if (selectedMovie.getActors() == null) {
            genres = new ArrayList<>();
        /*}
        else
        {*/
            genres.addAll(selectedMovie.getGenre());
        //}
        //if (allPeople == null) {        }
        allGenres = new ArrayList<>();
        allGenres = repository.selectAllGenres();
    }

    private void loadGenres() {
        genresModel.clear();
        genres.forEach(genresModel::addElement);
        lsGenres.setModel(genresModel);
    }

    private void loadAllGenres() {
        allGenresModel.clear();
        allGenres.forEach(allGenresModel::addElement);
        lsAllGenres.setModel(allGenresModel);
    }

    private void initDragNDop() {
        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new ExportHandler());
        
        lsGenres.setDropMode(DropMode.ON);
        lsGenres.setTransferHandler(new ImportHandler());
    }

    private boolean formValid() {
        boolean ok = true;
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }
        return ok;
    }

    private void resetGenres() {
       genres.clear();
       genres.addAll(selectedMovie.getGenre());
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        } 
    }

    private class ImportHandler extends TransferHandler {
        @Override
            public boolean canImport(TransferSupport support) {
                return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR); 
            }

            @Override
            public boolean importData(TransferSupport support) {
                Transferable transferable = support.getTransferable();
                try {
                        String data = (String)transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                        if (genres.add(data)) {
                            loadGenres();
                            return true;
                        }
                    } catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(EditPersonPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                return false;
            }
    }
}
